// Generated by gencpp from file niryo_robot_rpi/WifiButtonStatus.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_RPI_MESSAGE_WIFIBUTTONSTATUS_H
#define NIRYO_ROBOT_RPI_MESSAGE_WIFIBUTTONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_rpi
{
template <class ContainerAllocator>
struct WifiButtonStatus_
{
  typedef WifiButtonStatus_<ContainerAllocator> Type;

  WifiButtonStatus_()
    : mode(0)
    , state(0)  {
    }
  WifiButtonStatus_(const ContainerAllocator& _alloc)
    : mode(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef int8_t _mode_type;
  _mode_type mode;

   typedef int8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SHORT_PRESS)
  #undef SHORT_PRESS
#endif
#if defined(_WIN32) && defined(LONG_PRESS)
  #undef LONG_PRESS
#endif
#if defined(_WIN32) && defined(VERY_LONG_PRESS)
  #undef VERY_LONG_PRESS
#endif
#if defined(_WIN32) && defined(IGNORE_PRESS)
  #undef IGNORE_PRESS
#endif
#if defined(_WIN32) && defined(PRESSED)
  #undef PRESSED
#endif
#if defined(_WIN32) && defined(RELEASED)
  #undef RELEASED
#endif

  enum {
    SHORT_PRESS = 1,
    LONG_PRESS = 2,
    VERY_LONG_PRESS = 3,
    IGNORE_PRESS = 4,
    PRESSED = 0,
    RELEASED = 1,
  };


  typedef boost::shared_ptr< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> const> ConstPtr;

}; // struct WifiButtonStatus_

typedef ::niryo_robot_rpi::WifiButtonStatus_<std::allocator<void> > WifiButtonStatus;

typedef boost::shared_ptr< ::niryo_robot_rpi::WifiButtonStatus > WifiButtonStatusPtr;
typedef boost::shared_ptr< ::niryo_robot_rpi::WifiButtonStatus const> WifiButtonStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_rpi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0e70f855953624e078a0ffee0bd4e2c";
  }

  static const char* value(const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0e70f855953624eULL;
  static const uint64_t static_value2 = 0x078a0ffee0bd4e2cULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_rpi/WifiButtonStatus";
  }

  static const char* value(const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 SHORT_PRESS = 1\n"
"int8 LONG_PRESS = 2\n"
"int8 VERY_LONG_PRESS = 3\n"
"int8 IGNORE_PRESS = 4\n"
"int8 mode\n"
"\n"
"int8 PRESSED = 0\n"
"int8 RELEASED = 1\n"
"int8 state\n"
;
  }

  static const char* value(const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WifiButtonStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_rpi::WifiButtonStatus_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_RPI_MESSAGE_WIFIBUTTONSTATUS_H
