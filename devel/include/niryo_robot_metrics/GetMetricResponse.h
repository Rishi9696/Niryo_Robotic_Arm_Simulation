// Generated by gencpp from file niryo_robot_metrics/GetMetricResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_METRICS_MESSAGE_GETMETRICRESPONSE_H
#define NIRYO_ROBOT_METRICS_MESSAGE_GETMETRICRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_metrics/Metric.h>

namespace niryo_robot_metrics
{
template <class ContainerAllocator>
struct GetMetricResponse_
{
  typedef GetMetricResponse_<ContainerAllocator> Type;

  GetMetricResponse_()
    : status(0)
    , metric()  {
    }
  GetMetricResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , metric(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::niryo_robot_metrics::Metric_<ContainerAllocator>  _metric_type;
  _metric_type metric;





  typedef boost::shared_ptr< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetMetricResponse_

typedef ::niryo_robot_metrics::GetMetricResponse_<std::allocator<void> > GetMetricResponse;

typedef boost::shared_ptr< ::niryo_robot_metrics::GetMetricResponse > GetMetricResponsePtr;
typedef boost::shared_ptr< ::niryo_robot_metrics::GetMetricResponse const> GetMetricResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.metric == rhs.metric;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_metrics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6164ae0773a5b3bd1527db0c998a792";
  }

  static const char* value(const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6164ae0773a5b3bULL;
  static const uint64_t static_value2 = 0xd1527db0c998a792ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_metrics/GetMetricResponse";
  }

  static const char* value(const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"niryo_robot_metrics/Metric metric\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_metrics/Metric\n"
"string name\n"
"string value\n"
"string unit\n"
;
  }

  static const char* value(const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.metric);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMetricResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_metrics::GetMetricResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "metric: ";
    s << std::endl;
    Printer< ::niryo_robot_metrics::Metric_<ContainerAllocator> >::stream(s, indent + "  ", v.metric);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_METRICS_MESSAGE_GETMETRICRESPONSE_H
